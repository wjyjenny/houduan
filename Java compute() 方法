package com.company;
//compute() 方法对 hashMap 中指定 key 的值进行重新计算。
//
//compute() 方法的语法为：
//
//hashmap.compute(K key, BiFunction remappingFunction)
//注：hashmap 是 HashMap 类的一个对象。
//
//参数说明：
//
//key - 键
//remappingFunction - 重新映射函数，用于重新计算值
//返回值
//如果 key 对应的 value 不存在，则返回该 null，如果存在，则返回通过 remappingFunction 重新计算后的值。
import java.util.HashMap;
public class RunobTest25 {
    public static void main(String[] args) {
        //创建一个 HashMap
        HashMap<String, Integer> prices = new HashMap<>();

        // 往HashMap中添加映射项
        prices.put("Shoes", 200);
        prices.put("Bag", 300);
        prices.put("Pant", 150);
        System.out.println("HashMap: " + prices);

        // 重新计算鞋子打了10%折扣后的值
        int newPrice = prices.compute("Shoes", (key, value) -> value - value * 10/100);
        System.out.println("Discounted Price of Shoes: " + newPrice);

        // 输出更新后的HashMap
        System.out.println("Updated HashMap: " + prices);

        //Java HashMap computeIfAbsent() 方法
        //Java HashMap Java HashMap
        //
        //computeIfAbsent() 方法对 hashMap 中指定 key 的值进行重新计算，如果不存在这个 key，则添加到 hasMap 中。
        //
        //computeIfAbsent() 方法的语法为：
        //
        //hashmap.computeIfAbsent(K key, Function remappingFunction)
        //注：hashmap 是 HashMap 类的一个对象。
        //
        //参数说明：
        //
        //key - 键
        //remappingFunction - 重新映射函数，用于重新计算值
        //返回值
        //如果 key 对应的 value 不存在，则使用获取 remappingFunction 重新计算后的值，并保存为该 key 的 value，否则返回 value。
        // 计算 Shirt 的值
        int shirtPrice = prices.computeIfAbsent("Shirt", key -> 280);
        System.out.println("Price of Shirt: " + shirtPrice);

        // 输出更新后的HashMap
        System.out.println("Updated HashMap: " + prices);

        //Java HashMap computeIfPresent() 方法
        //Java HashMap Java HashMap
        //
        //computeIfPresent() 方法对 hashMap 中指定 key 的值进行重新计算，前提是该 key 存在于 hashMap 中。
        //
        //computeIfPresent() 方法的语法为：
        //
        //hashmap.computeIfPresent(K key, BiFunction remappingFunction)
        //注：hashmap 是 HashMap 类的一个对象。
        //
        //参数说明：
        //
        //key - 键
        //remappingFunction - 重新映射函数，用于重新计算值
        //返回值
        //如果 key 对应的 value 不存在，则返回该 null，如果存在，则返回通过 remappingFunction 重新计算后的值。

        // 重新计算鞋加上10%的增值税后的价值
        int shoesPrice = prices.computeIfPresent("Shoes", (key, value) -> value + value * 10/100);
        System.out.println("Price of Shoes after VAT: " + shoesPrice);

        // 输出更新后的HashMap
        System.out.println("Updated HashMap: " + prices);
    }
}
