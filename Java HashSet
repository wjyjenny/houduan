package com.company;
//Java HashSet
//HashSet 基于 HashMap 来实现的，是一个不允许有重复元素的集合。
//HashSet 允许有 null 值。
//HashSet 是无序的，即不会记录插入的顺序。
//HashSet 不是线程安全的， 如果多个线程尝试同时修改 HashSet，则最终结果是不确定的。 您必须在多线程访问时显式同步对 HashSet 的并发访问。
//HashSet 实现了 Set 接口。
//
//HashSet 类位于 java.util 包中，使用前需要引入它，语法格式如下：
//import java.util.HashSet; // 引入 HashSet 类
//以下实例我们创建一个 HashSet 对象 sites，用于保存字符串元素：
//HashSet<String> sites = new HashSet<String>();
import java.util.HashSet;
public class Hash {
    public static void main(String[] args) {
        HashSet<String> sites = new HashSet<String>();
        sites.add("Google");
        sites.add("Runoob");
        sites.add("Taobao");
        sites.add("Zhihu");
        sites.add("Runoob");  // 重复的元素不会被添加
        // Runoob 被添加了两次，它在集合中也只会出现一次，因为集合中的每个元素都必须是唯一的。
        System.out.println(sites);

        //可以使用 contains() 方法来判断元素是否存在于集合当中:
        System.out.println(sites.contains("Taobao"));

        //可以使用 remove() 方法来删除集合中的元素:
        sites.remove("Taobao");  // 删除元素，删除成功返回 true，否则为 false
        System.out.println(sites);

        //计算 HashSet 中的元素数量可以使用 size() 方法：
        System.out.println(sites.size());

        //使用 for-each 来迭代 HashSet 中的元素。
        for (String i : sites) {
            System.out.println(i);
        }

        //删除集合中所有元素可以使用 clear 方法：
        sites.clear();
        System.out.println(sites);
    }
}
